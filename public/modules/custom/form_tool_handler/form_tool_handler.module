<?php

/**
 * @file
 * Primary module hooks for form_tool_handler module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

/**
 * Perform alterations before a webform element configuration form is populated.
 *
 * @param array $form
 *   Nested array of form elements that comprise the webform element properties.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @see webform_example_element_properties.module
 * @ingroup form_api
 */
function form_tool_handler_element_configuration_form_alter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {

}


/**
 * Implements hook_entity_presave().
 */
function form_tool_handler_webform_presave(\Drupal\webform\Entity\Webform $entity) {

  // Make sure we have correct permissions set to webforms.
  // Let's just override anything set in the UI

  // Load settings
  $thirdPartySettings = $entity->getThirdPartySettings('form_tool_webform_parameters');

  // let's default permissions to none.
  $acc = [];

  // create basic permissions to all forms
  $acc['create']['users'] = [];
  $acc['create']['permissions'] = [];

  $acc['view_any']['roles'] = [
    'admin',
  ];
  $acc['view_any']['users'] = [];
  $acc['view_any']['permissions'] = [];

  $acc['update_any']['roles'] = [
    'admin',
  ];
  $acc['update_any']['users'] = [];
  $acc['update_any']['permissions'] = [];

  $acc['delete_any']['roles'] = [
    'admin',
  ];
  $acc['delete_any']['users'] = [];
  $acc['delete_any']['permissions'] = [];

  $acc['purge_any']['roles'] = [
    'admin',
  ];
  $acc['purge_any']['users'] = [];
  $acc['purge_any']['permissions'] = [];

  $acc['update_own']['users'] = [];
  $acc['update_own']['permissions'] = [];

  $acc['delete_own']['roles'] = [];
  $acc['delete_own']['users'] = [];
  $acc['delete_own']['permissions'] = [];

  $acc['administer']['roles'] = [];
  $acc['administer']['users'] = [];
  $acc['administer']['permissions'] = [];

  $acc['test']['roles'] = [
    'verkkolomake_hallinnoija',
  ];
  $acc['test']['users'] = [];
  $acc['test']['permissions'] = [];

  $acc['configuration']['roles'] = [];
  $acc['configuration']['users'] = [];
  $acc['configuration']['permissions'] = [];

  // and then per login type
  switch ($thirdPartySettings["login_type"]) {
    // strong auth
    case '2':

      $acc['create']['roles'] = [
        'helsinkiprofiili_vahva',
        'admin',
      ];

      $acc['update_own']['roles'] = [
        'helsinkiprofiili_vahva',
      ];

      $acc['view_own']['roles'] = [
        'helsinkiprofiili_vahva',
      ];

      break;
    // weak auth
    case '1':
      $acc['create']['roles'] = [
        'helsinkiprofiili_heikko',
        'admin',
      ];

      $acc['update_own']['roles'] = [
        'helsinkiprofiili_heikko',
      ];
      $acc['view_own']['roles'] = [
        'helsinkiprofiili_heikko',
      ];
      break;

    // all other cases.
    default:
      $acc['create']['roles'] = [
        'anonymous',
      ];
      break;
  }

  // set rules
  $entity->setAccessRules($acc);
}


/**
 * Implements hook_entity_insert().
 */
function form_tool_handler_webform_insert(\Drupal\webform\Entity\Webform $entity) {

  /** @var \Drupal\webform\Plugin\WebformHandlerManagerInterface $handler_manager */
  $handler_manager = \Drupal::service('plugin.manager.webform.handler');

  // Create webform handler config
  $handler_configuration = [
    'id' => 'form_tool_handler',
    'label' => 'Form Tool Handler',
    'handler_id' => 'form_tool_handler',
    'status' => TRUE,
    'weight' => 0,
    'settings' => [],
    'conditions' => [],
  ];
  try {
    /** @var \Drupal\webform\Plugin\WebformHandlerInterface $handler */
    $handler = $handler_manager->createInstance('form_tool_handler', $handler_configuration);

    // Must set original id so that the webform can be resaved.
    $entity->setOriginalId($entity->id());

    // Add webform handler which triggers Webform::save().
    $entity->addWebformHandler($handler);

  } catch (\Drupal\Component\Plugin\Exception\PluginException $e) {
    \Drupal::messenger()
      ->addError('Failed adding from tool handler automatically to a webform');
  }


}

/**
 * Implements hook_entity_type_alter().
 */
function form_tool_handler_entity_type_alter(array &$entity_types) {
  // Add our custom handler for webform
  $entity_types['webform_submission']->setStorageClass('Drupal\form_tool_handler\FormToolSubmissionStorage');
}

/**
 * Implements hook_mail().
 */
function form_tool_handler_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    case 'submission_email_notify':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('New submission for @title', ['@title' => $params['form_title']], $options);
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_theme().
 */
function form_tool_handler_theme($existing, $type, $theme, $path) {
  return [
    'submission_print' => [
      'variables' => [
        'submission' => NULL,
        'form' => NULL,
        'id' => NULL,
      ],
    ],
  ];
}
<?php

/**
 * @file
 * Provides hooks and helpers for profile / user related things.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_form_alter().
 */
function form_tool_profile_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide fields from login forms without proper query strings.
  // If we're at user login.
  if ($form_id == 'user_login_form') {
    $qParams = \Drupal::request()->query->all();
    // We want to hide all normal login elements
    // to only allow login via Tunnistamo.
    if (!isset($qParams['login']) || $qParams['login'] != 'admin') {
      unset($form['name']);
      unset($form['pass']);
      unset($form['actions']);
    }

    // Let's not cache this form at all, anywhere.
    // Or cache it per url query args.
    $form['#cache'] = [
      'contexts' => [
        'url.query_args',
      ],
    ];

  }
  // And from Tunnistamo, we want to allow only user logins
  // without loginparameter.
  if ($form_id == 'openid_connect_login_form') {
    $qParams = \Drupal::request()->query->all();

    if (
      !isset($qParams['login']) ||
      !in_array($qParams['login'], ['admin', 'on-admin'])
    ) {
      unset($form["openid_connect_client_tunnistamoadmin_login"]);
    }

    // Show only TunnistamoAdmin login for this login parameter.
    if (isset($qParams['login']) && $qParams['login'] === 'on-admin') {
      unset($form["openid_connect_client_tunnistamo_login"]);
    }
  }

}

/**
 * Implements hook_page_attachments().
 */
function form_tool_profile_page_attachments(array &$attachments) {
  $admin_context = \Drupal::service('router.admin_context');
  if (!$admin_context->isAdminRoute() && \Drupal::currentUser()->isAuthenticated()) {
    $attachments['#attached']['library'][] = 'form_tool_profile/form_tool_profile';
    $attachments['#attached']['drupalSettings']['form_tool_profile']['basePath'] = \Drupal::request()->getHost();
    $attachments['#attached']['drupalSettings']['form_tool_profile']['logout'] = Url::fromRoute('user.logout.http')->toString();
  }
}

/**
 * Implements hook_preprocess_page().
 */
function form_tool_profile_preprocess_page(&$vars) {

  // Webform access check - 403 Page.
  $route_name = \Drupal::routeMatch()->getRouteName();
  $node = \Drupal::routeMatch()->getMasterRouteMatch()->getParameter('node');

  if ($node && $node->getType() === 'webform' && $route_name === 'system.403') {

    if (\Drupal::request()->attributes->has('exception')) {
      $vars['#cache']['max-age'] = 0;
      \Drupal::service('page_cache_kill_switch')->trigger();
    }

    $webform_relation = $node->get('webform')->getValue()[0];
    $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($webform_relation['target_id']);

    $login_type = $webform->getThirdPartySetting('form_tool_webform_parameters', 'login_type');

    if ($login_type !== NULL) {
      $info_text = \Drupal::service('form_tool_profile.login_info')->getLoginInfo($login_type);
      $vars['page']['login_info'] = [
        '#markup' => $info_text,
      ];
    }
  }

  // Check for basic user.login page.
  if ($route_name === 'user.login') {
    $info_text = \Drupal::service('form_tool_profile.login_info')->getLoginInfo();
    $vars['page']['login_info'] = [
      '#markup' => $info_text,
    ];
  }

}

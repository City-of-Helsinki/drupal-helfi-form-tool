<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="profiilista-lomakkeelle-taytto-lahetys4" enabled="true">
      <stringProp name="TestPlan.comments">Performance testing Helsinki profile application</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="helsinki-profile-ui" elementType="Argument">
            <stringProp name="Argument.name">helsinki-profile-ui</stringProp>
            <stringProp name="Argument.value">${__P(helsinki-profile-ui, profiili.stage.hel.ninja)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">hostname for helsinki-profile-ui application</stringProp>
          </elementProp>
          <elementProp name="tunnistamo" elementType="Argument">
            <stringProp name="Argument.name">tunnistamo</stringProp>
            <stringProp name="Argument.value">${__P(tunnistamo, api.hel.fi)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">hostname for tunnistamo application</stringProp>
          </elementProp>
          <elementProp name="tunnistus" elementType="Argument">
            <stringProp name="Argument.name">tunnistus</stringProp>
            <stringProp name="Argument.value">${__P(tunnistus, tunnistus.stage.hel.ninja)}</stringProp>
            <stringProp name="Argument.desc">hostname for tunnistus application</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="helsinki-profile-api" elementType="Argument">
            <stringProp name="Argument.name">helsinki-profile-api</stringProp>
            <stringProp name="Argument.value">${__P(helsinki-profile-api, api.hel.fi)}</stringProp>
            <stringProp name="Argument.desc">hostname for helsinki-profile-api application</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ui_locales" elementType="Argument">
            <stringProp name="Argument.name">ui_locales</stringProp>
            <stringProp name="Argument.value">en-US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thread-count" elementType="Argument">
            <stringProp name="Argument.name">thread-count</stringProp>
            <stringProp name="Argument.value">${__P(thread-count, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thread-ramp-up" elementType="Argument">
            <stringProp name="Argument.name">thread-ramp-up</stringProp>
            <stringProp name="Argument.value">${__P(thread-ramp-up, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thread-loop" elementType="Argument">
            <stringProp name="Argument.name">thread-loop</stringProp>
            <stringProp name="Argument.value">${__P(thread-loop, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="parallel-controller-loop" elementType="Argument">
            <stringProp name="Argument.name">parallel-controller-loop</stringProp>
            <stringProp name="Argument.value">${__P(parallel-controller-loop, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Kirjaudu suomi.fi:llä, täytä lomake ja lähetä se" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${thread-loop}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${thread-count}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${thread-ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${helsinki-profile-ui}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP CookieManager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Open Helsinki profile login page - Step 1" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${helsinki-profile-ui}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Sign in to Helsinki profile" enabled="true">
          <stringProp name="TestPlan.comments">Sign in to Helsinki profile </stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="303324127">profiilista-lomakkeelle-taytto-lahetys3</stringProp>
            <stringProp name="249949539">Sign in to Helsinki profile </stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Lomake osuus - Simple Controller" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="sec-ch-ua" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua</stringProp>
                <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;110&quot;, &quot;Not A(Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;110&quot;</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-mobile" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                <stringProp name="Header.value">?0</stringProp>
              </elementProp>
              <elementProp name="sec-ch-ua-platform" elementType="Header">
                <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="BASE_URL_1" elementType="Argument">
                <stringProp name="Argument.name">BASE_URL_1</stringProp>
                <stringProp name="Argument.value">www.hel.fi</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BASE_URL_2" elementType="Argument">
                <stringProp name="Argument.name">BASE_URL_2</stringProp>
                <stringProp name="Argument.value">api.hel.fi</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BASE_URL_3" elementType="Argument">
                <stringProp name="Argument.name">BASE_URL_3</stringProp>
                <stringProp name="Argument.value">cdn.jsdelivr.net</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
            <collectionProp name="DNSCacheManager.servers"/>
            <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
            <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
          </DNSCacheManager>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list"/>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
            <boolProp name="clearEachIteration">true</boolProp>
            <boolProp name="useExpires">false</boolProp>
            <boolProp name="CacheManager.controlledByThread">false</boolProp>
          </CacheManager>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET 1 - Kuuluu feilata - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">0.0</stringProp>
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_f5uhs1Dg03-5eKelqCDVwpx7qCVJHYCwVKOR3e85a4w.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/sites/default/files/js/js_f5uhs1Dg03-5eKelqCDVwpx7qCVJHYCwVKOR3e85a4w.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_HqCLmnfDkaSwfJN681JjTM9sU3y5S1sN5DJ9YoVOosY.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/sites/default/files/js/js_HqCLmnfDkaSwfJN681JjTM9sU3y5S1sN5DJ9YoVOosY.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_VAo4EOZ96gexod_YVI0ik2lC8sjOOVxiFUlushcaErU.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/sites/default/files/js/js_VAo4EOZ96gexod_YVI0ik2lC8sjOOVxiFUlushcaErU.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/modules/contrib/eu_cookie_compliance/js/eu_cookie_compliance.js?v=9.5.3" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">v</stringProp>
                    <stringProp name="Argument.value">9.5.3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/modules/contrib/eu_cookie_compliance/js/eu_cookie_compliance.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/nav-toggle.min.js?v=1.x" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">v</stringProp>
                    <stringProp name="Argument.value">1.x</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/themes/contrib/hdbt/dist/js/nav-toggle.min.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/staging-lomake-assets/themes/contrib/hdbt/dist/icons/sprite-c23a0.svg#helsinki" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/staging-lomake-assets/themes/contrib/hdbt/dist/icons/sprite-c23a0.svg#helsinki</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/toggleWidgets.chunk.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/toggleWidgets.chunk.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/navToggleDropdown.chunk.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/navToggleDropdown.chunk.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/src/images/favicon/manifest.webmanifest" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/themes/contrib/hdbt/src/images/favicon/manifest.webmanifest</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST 1 - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="form_build_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">form_build_id</stringProp>
                    <stringProp name="Argument.value">form-YHqdBSMlHhKtBMT4XgtoqukHwYdBA7IkmbrLyQRz71Y</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="form_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">form_id</stringProp>
                    <stringProp name="Argument.value">openid_connect_login_form</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tunnistamo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">tunnistamo</stringProp>
                    <stringProp name="Argument.value">Kirjaudu sisään</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">7212.0</stringProp>
                <stringProp name="ConstantTimer.delay">3606</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 7212 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://api.hel.fi/sso-test/openid/authorize/?client_id=lomaketyokalu-ui-stage&amp;response_type=code&amp;scope=openid%20profile%20email%20https%3A//api.hel.fi/auth/helsinkiprofile%20https%3A//api.hel.fi/avustusasiointi%20https%3A//api.hel.fi/auth/atvapistage%20https%3A//api.hel.fi/auth/atvapistaging&amp;redirect_uri=https%3A//www.hel.fi/fi/staging-lomakkeet/openid-connect/tunnistamo&amp;state=y2_WD0apg3nkd9cpZBlLcUu4pxcsYHCOvQI0fiNaOgE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">openid profile email https://api.hel.fi/auth/helsinkiprofile https://api.hel.fi/avustusasiointi https://api.hel.fi/auth/atvapistage https://api.hel.fi/auth/atvapistaging</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">code</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://www.hel.fi/fi/staging-lomakkeet/openid-connect/tunnistamo</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="state" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">state</stringProp>
                    <stringProp name="Argument.value">y2_WD0apg3nkd9cpZBlLcUu4pxcsYHCOvQI0fiNaOgE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">lomaketyokalu-ui-stage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/sso-test/openid/authorize/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">1140.0</stringProp>
                <stringProp name="ConstantTimer.delay">570</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 1140 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/fi/staging-lomakkeet/openid-connect/tunnistamo?code=7d7f9d0d96ea414ba55834c4e3193f48&amp;state=y2_WD0apg3nkd9cpZBlLcUu4pxcsYHCOvQI0fiNaOgE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="code" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">code</stringProp>
                    <stringProp name="Argument.value">7d7f9d0d96ea414ba55834c4e3193f48</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="state" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">state</stringProp>
                    <stringProp name="Argument.value">y2_WD0apg3nkd9cpZBlLcUu4pxcsYHCOvQI0fiNaOgE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/openid-connect/tunnistamo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">381.0</stringProp>
                <stringProp name="ConstantTimer.delay">190.5</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 381 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET 2 - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="check_logged_in" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">check_logged_in</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">2133.0</stringProp>
                <stringProp name="ConstantTimer.delay">1066.5</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 2133 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="oma form build id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">oma_form_build_id</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;form_build_id&quot; value=&quot;([^&quot;]+)&quot; </stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">ei-onnistunut</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="oma form token" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">oma_form_token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;form_token&quot; value=&quot;([^&quot;]+)&quot; </stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">ei-onnistunut</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_f5uhs1Dg03-5eKelqCDVwpx7qCVJHYCwVKOR3e85a4w.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/sites/default/files/js/js_f5uhs1Dg03-5eKelqCDVwpx7qCVJHYCwVKOR3e85a4w.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_HqCLmnfDkaSwfJN681JjTM9sU3y5S1sN5DJ9YoVOosY.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/sites/default/files/js/js_HqCLmnfDkaSwfJN681JjTM9sU3y5S1sN5DJ9YoVOosY.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_JqGdEeO17_5GP4QGW60dNoFcSxUK-O-wP2_AF12sJKs.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/sites/default/files/js/js_JqGdEeO17_5GP4QGW60dNoFcSxUK-O-wP2_AF12sJKs.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://cdn.jsdelivr.net/gh/ractoon/jQuery-Text-Counter@0.9.0/textcounter.min.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/gh/ractoon/jQuery-Text-Counter@0.9.0/textcounter.min.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_qNRb0DjTxi-hsfWxKc-pZoeEP7vOjxzXz0yz5yeF704.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/sites/default/files/js/js_qNRb0DjTxi-hsfWxKc-pZoeEP7vOjxzXz0yz5yeF704.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/modules/contrib/eu_cookie_compliance/js/eu_cookie_compliance.js?v=9.5.3" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">v</stringProp>
                    <stringProp name="Argument.value">9.5.3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/modules/contrib/eu_cookie_compliance/js/eu_cookie_compliance.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/nav-toggle.min.js?v=1.x" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">v</stringProp>
                    <stringProp name="Argument.value">1.x</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/themes/contrib/hdbt/dist/js/nav-toggle.min.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/toggleWidgets.chunk.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/toggleWidgets.chunk.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/navToggleDropdown.chunk.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/navToggleDropdown.chunk.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/src/images/favicon/manifest.webmanifest" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/staging-lomake-assets/themes/contrib/hdbt/src/images/favicon/manifest.webmanifest</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST 2 - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="check_logged_in" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">check_logged_in</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                    <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                    <stringProp name="Argument.value">Järvites</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_build_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">form_build_id</stringProp>
                    <stringProp name="Argument.value">${oma_form_build_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">form_token</stringProp>
                    <stringProp name="Argument.value">${oma_form_token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                    <stringProp name="Argument.value">jmeter koulu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                    <stringProp name="Argument.value">150552-9979</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                    <stringProp name="Argument.value">pickup</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="op" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">op</stringProp>
                    <stringProp name="Argument.value">Lähetä</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                    <stringProp name="Argument.value">Taavetti</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                    <stringProp name="Argument.value">Lukion päättötodistus</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">form_id</stringProp>
                    <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                    <stringProp name="Argument.value">+3589393939666</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                    <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">38919.0</stringProp>
                <stringProp name="ConstantTimer.delay">19459.5</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 38919 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="oma_lahetetty_lomake_numero" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">oma_lahetetty_lomake_numero</stringProp>
                <stringProp name="RegexExtractor.regex">href=&quot;\/fi\/staging-lomakkeet\/formtool\/completion\/HEL-TODISTUS-(\d{8})-STAGE</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">ei-onnistunut</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET 3 - https://www.hel.fi/fi/staging-lomakkeet/formtool/completion/HEL-TODISTUS-00000xxx-STAGE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/formtool/completion/HEL-TODISTUS-${oma_lahetetty_lomake_numero}-STAGE</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">4656.0</stringProp>
                <stringProp name="ConstantTimer.delay">2328</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 4656 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_f5uhs1Dg03-5eKelqCDVwpx7qCVJHYCwVKOR3e85a4w.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/sites/default/files/js/js_f5uhs1Dg03-5eKelqCDVwpx7qCVJHYCwVKOR3e85a4w.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_HqCLmnfDkaSwfJN681JjTM9sU3y5S1sN5DJ9YoVOosY.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/sites/default/files/js/js_HqCLmnfDkaSwfJN681JjTM9sU3y5S1sN5DJ9YoVOosY.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_uyuq2mnxkd89ofHBx2UrpLLc5WEqXodqCJsNyUoBUBE.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/sites/default/files/js/js_uyuq2mnxkd89ofHBx2UrpLLc5WEqXodqCJsNyUoBUBE.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/modules/contrib/eu_cookie_compliance/js/eu_cookie_compliance.js?v=9.5.3" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">v</stringProp>
                    <stringProp name="Argument.value">9.5.3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/modules/contrib/eu_cookie_compliance/js/eu_cookie_compliance.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/nav-toggle.min.js?v=1.x" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">v</stringProp>
                    <stringProp name="Argument.value">1.x</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/themes/contrib/hdbt/dist/js/nav-toggle.min.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/staging-lomake-assets/themes/contrib/hdbt/dist/icons/sprite-c23a0.svg#helsinki" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/staging-lomake-assets/themes/contrib/hdbt/dist/icons/sprite-c23a0.svg#helsinki</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/toggleWidgets.chunk.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/themes/contrib/hdbt/dist/js/async/toggleWidgets.chunk.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/navToggleDropdown.chunk.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/themes/contrib/hdbt/dist/js/async/navToggleDropdown.chunk.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/src/images/favicon/manifest.webmanifest" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/themes/contrib/hdbt/src/images/favicon/manifest.webmanifest</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/fi/staging-lomakkeet/lomake/HEL-TODISTUS-00000xxx-STAGE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/lomake/HEL-TODISTUS-${oma_lahetetty_lomake_numero}-STAGE</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">7452.0</stringProp>
                <stringProp name="ConstantTimer.delay">3726</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 7452 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_f5uhs1Dg03-5eKelqCDVwpx7qCVJHYCwVKOR3e85a4w.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/sites/default/files/js/js_f5uhs1Dg03-5eKelqCDVwpx7qCVJHYCwVKOR3e85a4w.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_HqCLmnfDkaSwfJN681JjTM9sU3y5S1sN5DJ9YoVOosY.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/sites/default/files/js/js_HqCLmnfDkaSwfJN681JjTM9sU3y5S1sN5DJ9YoVOosY.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/sites/default/files/js/js_uyuq2mnxkd89ofHBx2UrpLLc5WEqXodqCJsNyUoBUBE.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/sites/default/files/js/js_uyuq2mnxkd89ofHBx2UrpLLc5WEqXodqCJsNyUoBUBE.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/modules/contrib/eu_cookie_compliance/js/eu_cookie_compliance.js?v=9.5.3" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">v</stringProp>
                    <stringProp name="Argument.value">9.5.3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/modules/contrib/eu_cookie_compliance/js/eu_cookie_compliance.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/nav-toggle.min.js?v=1.x" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">v</stringProp>
                    <stringProp name="Argument.value">1.x</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/themes/contrib/hdbt/dist/js/nav-toggle.min.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/staging-lomake-assets/themes/contrib/hdbt/dist/icons/sprite-c23a0.svg#helsinki" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/staging-lomake-assets/themes/contrib/hdbt/dist/icons/sprite-c23a0.svg#helsinki</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/toggleWidgets.chunk.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/themes/contrib/hdbt/dist/js/async/toggleWidgets.chunk.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/dist/js/async/navToggleDropdown.chunk.js" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/themes/contrib/hdbt/dist/js/async/navToggleDropdown.chunk.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.hel.fi/staging-lomake-assets/themes/contrib/hdbt/src/images/favicon/manifest.webmanifest" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">staging-lomake-assets/themes/contrib/hdbt/src/images/favicon/manifest.webmanifest</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate random form_build_id" enabled="false">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">function generateRandomString() {
  var prefix = &quot;form--&quot;;
  var characters = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;
  var length = 32;

  var randomString = prefix;
  for (var i = 0; i &lt; length; i++) {
    randomString += characters.charAt(Math.floor(Math.random() * characters.length));
  }

  return randomString;
}

var form_build_id = generateRandomString();
//console.log(form_build_id);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Lähetä yksi lomake" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Tämän kuuluukin feilata - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Siirrytään profiilista lomake login sivulle - Tämän stepin kuuluu feilata 403 virheeseen</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">0.0</stringProp>
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="form_build_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">form_build_id</stringProp>
                    <stringProp name="Argument.value">form-tRqHFSr95IIy9bvnTeFLwuOP2xfCNvYqzMIwgNoDJvA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">form_id</stringProp>
                    <stringProp name="Argument.value">openid_connect_login_form</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tunnistamo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">tunnistamo</stringProp>
                    <stringProp name="Argument.value">Kirjaudu sisään</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Painetaan sivulla olevaan kirjaudu nappia joka vie käyttäjän lomakkeen täyttö sivulle</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">4211.0</stringProp>
                <stringProp name="ConstantTimer.delay">2105.5</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 4211 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="check_logged_in" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">check_logged_in</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                    <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                    <stringProp name="Argument.value">Järvites</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_build_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">form_build_id</stringProp>
                    <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">form_token</stringProp>
                    <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                    <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                    <stringProp name="Argument.value">150552-9979</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                    <stringProp name="Argument.value">pickup</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="op" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">op</stringProp>
                    <stringProp name="Argument.value">Lähetä</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                    <stringProp name="Argument.value">Taavetti</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                    <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">form_id</stringProp>
                    <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                    <stringProp name="Argument.value">+3589393939393</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                    <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">32371.0</stringProp>
                <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">00000666</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
                <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                <stringProp name="HtmlExtractor.attribute"></stringProp>
                <stringProp name="HtmlExtractor.default">666</stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </HtmlExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - https://www.hel.fi/fi/staging-lomakkeet/lomake/HEL-TODISTUS-00000xxx-STAGE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/lomake/HEL-TODISTUS-${lahetettylomakenumero}-STAGE</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Katsotaan, että lomakkeen tarkistus sivu aukeaa</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">10582.0</stringProp>
                <stringProp name="ConstantTimer.delay">5291</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 10582 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller - 1 käyttäjä" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Tämän kuuluukin feilata - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Siirrytään profiilista lomake login sivulle - Tämän stepin kuuluu feilata 403 virheeseen</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">0.0</stringProp>
                  <stringProp name="ConstantTimer.delay">0</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - login sivulta lomake sivulle - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form-tRqHFSr95IIy9bvnTeFLwuOP2xfCNvYqzMIwgNoDJvA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">openid_connect_login_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="tunnistamo" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">tunnistamo</stringProp>
                      <stringProp name="Argument.value">Kirjaudu sisään</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Painetaan sivulla olevaan kirjaudu nappia joka vie käyttäjän lomakkeen täyttö sivulle</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">4211.0</stringProp>
                  <stringProp name="ConstantTimer.delay">2105.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 4211 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--${__RandomString(43,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller 10 käyttäjää" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller 20 käyttäjää" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller 50 käyttäjää" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lähetä lomake - Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - lomakkeen lähetys - https://www.hel.fi/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus?check_logged_in=1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="check_logged_in" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">check_logged_in</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedPermanentAddress]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedPermanentAddress]</stringProp>
                      <stringProp name="Argument.value">Kirkkopuistikko 17-21 F 123, 65100, VAASA</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedLastName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedLastName]</stringProp>
                      <stringProp name="Argument.value">Järvites</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[zip_code]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[zip_code]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="privacy_policy_acceptance" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">privacy_policy_acceptance</stringProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_build_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_build_id</stringProp>
                      <stringProp name="Argument.value">form--0Fpgz5VIYVS2mk21xBoOsZBB1mSLpXbtSa42Om9tow</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_token" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_token</stringProp>
                      <stringProp name="Argument.value">6yWu-2nbbsSF4FGltRAcTJ_jLcryqVPJ1whB1-2joao</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="todistuksen_antanut_helsinkilainen_koulu" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">todistuksen_antanut_helsinkilainen_koulu</stringProp>
                      <stringProp name="Argument.value">Koulun nimi pitäisi lukea tässä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedSsn]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedSsn]</stringProp>
                      <stringProp name="Argument.value">150552-9979</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[delivery_method]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[delivery_method]</stringProp>
                      <stringProp name="Argument.value">pickup</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[email]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[email]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[city]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[city]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="mahdolliset_lisatiedot" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">mahdolliset_lisatiedot</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_first_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_first_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="op" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">op</stringProp>
                      <stringProp name="Argument.value">Lähetä</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[verifiedFirstName]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[verifiedFirstName]</stringProp>
                      <stringProp name="Argument.value">Taavetti</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_tilattava_todistus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_tilattava_todistus</stringProp>
                      <stringProp name="Argument.value">Peruskoulun päättötodistus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="form_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">form_id</stringProp>
                      <stringProp name="Argument.value">webform_submission_todistusjaljennospyynto_tilaus_node_1_add_form</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryPhone]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryPhone]</stringProp>
                      <stringProp name="Argument.value">+3589393939393</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="profile_fields[primaryEmail]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">profile_fields[primaryEmail]</stringProp>
                      <stringProp name="Argument.value">taavettijarvitesstage@guerrillamail.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[cod_phone_number]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[cod_phone_number]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[last_name]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[last_name]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="valitse_toimitustapa[street_address]" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">valitse_toimitustapa[street_address]</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/fi/staging-lomakkeet/todistusjaljennospyynto-tilaus</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Täytetään ja lähetetään lomake</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="RandomTimer.range">32371.0</stringProp>
                  <stringProp name="ConstantTimer.delay">16185.5</stringProp>
                  <stringProp name="TestPlan.comments">Recorded time was 32371 milliseconds</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">${lahetettylomakenumero}</stringProp>
                  <stringProp name="RegexExtractor.regex">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">00000666</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Nappastaan urlista lomakkeen numero mallia 00000244</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                  <stringProp name="HtmlExtractor.refname">${uli}</stringProp>
                  <stringProp name="HtmlExtractor.expr">/HEL-TODISTUS-(\d+)-STAGE/</stringProp>
                  <stringProp name="HtmlExtractor.attribute"></stringProp>
                  <stringProp name="HtmlExtractor.default">666</stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update my information" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(helsinki-profile-api, profile-api.dev.hel.ninja)}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${api_token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller 20kpl" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller 50kpl" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller 70kpl" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller 100kpl" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller 10kpl" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller 5kpl" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${parallel-controller-loop}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get my information - Step 3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/profiili-stage/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract phone_id" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">phone_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.myProfile.phones.edges[:1].node.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Update language of communication - Step 4" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;UpdateMyProfile&quot;,&quot;variables&quot;:{&quot;input&quot;:{&quot;profile&quot;:{&quot;language&quot;:&quot;ENGLISH&quot;}}},&quot;query&quot;:&quot;mutation UpdateMyProfile($input: UpdateMyProfileMutationInput!) { updateMyProfile(input: $input) { profile { id firstName lastName nickname language primaryAddress { id primary address postalCode city countryCode addressType __typename } addresses { edges { node { primary id address postalCode city countryCode addressType __typename } __typename } __typename } primaryEmail { id email primary emailType __typename } emails { edges { node { primary id email emailType __typename } __typename } __typename } primaryPhone { id phone primary phoneType __typename } phones { edges { node { primary id phone phoneType __typename } __typename } __typename } __typename } __typename } }&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/graphql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">UpdateMyProfile</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation UpdateMyProfile($input: UpdateMyProfileMutationInput!) { updateMyProfile(input: $input) { profile { id firstName lastName nickname language primaryAddress { id primary address postalCode city countryCode addressType __typename } addresses { edges { node { primary id address postalCode city countryCode addressType __typename } __typename } __typename } primaryEmail { id email primary emailType __typename } emails { edges { node { primary id email emailType __typename } __typename } __typename } primaryPhone { id phone primary phoneType __typename } phones { edges { node { primary id phone phoneType __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
   &quot;input&quot;: {
       &quot;profile&quot;: {
           &quot;language&quot;: &quot;ENGLISH&quot;
       }
   }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Update phone number - Step 5" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="phone_number" elementType="Argument">
                  <stringProp name="Argument.name">phone_number</stringProp>
                  <stringProp name="Argument.value">+123${__RandomString(10,1234567890)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If you haven&apos;t given a phone number" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;phone_id&quot;) == null || vars.get(&quot;phone_id&quot;).length() == 0)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Add phone numer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;UpdateMyProfile&quot;,&quot;variables&quot;:{&quot;input&quot;:{&quot;profile&quot;:{&quot;addPhones&quot;:[{&quot;phone&quot;:&quot;${phone_number}&quot;,&quot;primary&quot;:false,&quot;phoneType&quot;:&quot;OTHER&quot;}],&quot;updatePhones&quot;:[],&quot;removePhones&quot;:[]}}},&quot;query&quot;:&quot;mutation UpdateMyProfile($input: UpdateMyProfileMutationInput!) { updateMyProfile(input: $input) { profile { id firstName lastName nickname language primaryAddress { id primary address postalCode city countryCode addressType __typename } addresses { edges { node { primary id address postalCode city countryCode addressType __typename } __typename } __typename } primaryEmail { id email primary emailType __typename } emails { edges { node { primary id email emailType __typename } __typename } __typename } primaryPhone { id phone primary phoneType __typename } phones { edges { node { primary id phone phoneType __typename } __typename } __typename } __typename } __typename } }&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">UpdateMyProfile</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation UpdateMyProfile($input: UpdateMyProfileMutationInput!) { updateMyProfile(input: $input) { profile { id firstName lastName nickname language primaryAddress { id primary address postalCode city countryCode addressType __typename } addresses { edges { node { primary id address postalCode city countryCode addressType __typename } __typename } __typename } primaryEmail { id email primary emailType __typename } emails { edges { node { primary id email emailType __typename } __typename } __typename } primaryPhone { id phone primary phoneType __typename } phones { edges { node { primary id phone phoneType __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;input&quot;: {
		&quot;profile&quot;: {
			&quot;addPhones&quot;: [ { &quot;phone&quot;:&quot;${phone_number}&quot;,&quot;primary&quot;:false,&quot;phoneType&quot;:&quot;OTHER&quot; } ],
			&quot;updatePhones&quot;:[],
			&quot;removePhones&quot;:[]
		}
	}
}
</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If you have given a phone number" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;phone_id&quot;) != null &amp;&amp; vars.get(&quot;phone_id&quot;).length() &gt; 0)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Edit phone number" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;UpdateMyProfile&quot;,&quot;variables&quot;:{&quot;input&quot;:{&quot;profile&quot;:{&quot;addPhones&quot;:[],&quot;updatePhones&quot;:[{&quot;id&quot;:&quot;${phone_id}&quot;,&quot;phone&quot;:&quot;${phone_number}&quot;,&quot;primary&quot;:false,&quot;phoneType&quot;:&quot;OTHER&quot;}]}}},&quot;query&quot;:&quot;mutation UpdateMyProfile($input: UpdateMyProfileMutationInput!) { updateMyProfile(input: $input) { profile { id firstName lastName nickname language primaryAddress { id primary address postalCode city countryCode addressType __typename } addresses { edges { node { primary id address postalCode city countryCode addressType __typename } __typename } __typename } primaryEmail { id email primary emailType __typename } emails { edges { node { primary id email emailType __typename } __typename } __typename } primaryPhone { id phone primary phoneType __typename } phones { edges { node { primary id phone phoneType __typename } __typename } __typename } __typename } __typename } }&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">UpdateMyProfile</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation UpdateMyProfile($input: UpdateMyProfileMutationInput!) { updateMyProfile(input: $input) { profile { id firstName lastName nickname language primaryAddress { id primary address postalCode city countryCode addressType __typename } addresses { edges { node { primary id address postalCode city countryCode addressType __typename } __typename } __typename } primaryEmail { id email primary emailType __typename } emails { edges { node { primary id email emailType __typename } __typename } __typename } primaryPhone { id phone primary phoneType __typename } phones { edges { node { primary id phone phoneType __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;input&quot;: {
		&quot;profile&quot;: {
			&quot;addPhones&quot;: [],
			&quot;updatePhones&quot;:[{&quot;id&quot;:&quot;${phone_id}&quot;,&quot;phone&quot;:&quot;${phone_number}&quot;,&quot;primary&quot;:false,&quot;phoneType&quot;:&quot;OTHER&quot;}]
		}
	}
}
</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Remove phone number" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;UpdateMyProfile&quot;,&quot;variables&quot;:{&quot;input&quot;:{&quot;profile&quot;:{&quot;addPhones&quot;:[],&quot;updatePhones&quot;:[],&quot;removePhones&quot;:[&quot;${phone_id}&quot;]}}},&quot;query&quot;:&quot;mutation UpdateMyProfile($input: UpdateMyProfileMutationInput!) { updateMyProfile(input: $input) { profile { id firstName lastName nickname language primaryAddress { id primary address postalCode city countryCode addressType __typename } addresses { edges { node { primary id address postalCode city countryCode addressType __typename } __typename } __typename } primaryEmail { id email primary emailType __typename } emails { edges { node { primary id email emailType __typename } __typename } __typename } primaryPhone { id phone primary phoneType __typename } phones { edges { node { primary id phone phoneType __typename } __typename } __typename } __typename } __typename } }&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/graphql/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">UpdateMyProfile</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation UpdateMyProfile($input: UpdateMyProfileMutationInput!) { updateMyProfile(input: $input) { profile { id firstName lastName nickname language primaryAddress { id primary address postalCode city countryCode addressType __typename } addresses { edges { node { primary id address postalCode city countryCode addressType __typename } __typename } __typename } primaryEmail { id email primary emailType __typename } emails { edges { node { primary id email emailType __typename } __typename } __typename } primaryPhone { id phone primary phoneType __typename } phones { edges { node { primary id phone phoneType __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;input&quot;: {
		&quot;profile&quot;: {
			&quot;addPhones&quot;:[],
			&quot;updatePhones&quot;:[],
			&quot;removePhones&quot;:[&quot;${phone_id}&quot;]
		}
	}
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Sign out" enabled="false">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="303324127">profiilista-lomakkeelle-taytto-lahetys3</stringProp>
            <stringProp name="374429323">Sign out</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View my services" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${thread-loop}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${thread-count}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${thread-ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="TestPlan.comments">User signs in, views their services, and signs out</stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${helsinki-profile-ui}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP CookieManager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Open Helsinki profile login page" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${helsinki-profile-ui}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Sign in to Helsinki profile " enabled="true">
          <stringProp name="TestPlan.comments">Sign in to Helsinki profile </stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="249949539">Sign in to Helsinki profile </stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View my services" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(helsinki-profile-api, profile-api.dev.hel.ninja)}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${api_token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Get services" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ServiceConnectionsQuery&quot;,&quot;variables&quot;:{&quot;language&quot;:&quot;EN&quot;},&quot;query&quot;:&quot;query ServiceConnectionsQuery($language: TranslationLanguage!) { myProfile { id serviceConnections { edges { node { service { title(language: $language) description(language: $language) allowedDataFields { edges { node { fieldName label(language: $language) __typename } __typename } __typename } __typename } createdAt __typename } __typename } __typename } __typename } }&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/graphql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ServiceConnectionsQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ServiceConnectionsQuery($language: TranslationLanguage!) { myProfile { id serviceConnections { edges { node { service { title(language: $language) description(language: $language) allowedDataFields { edges { node { fieldName label(language: $language) __typename } __typename } __typename } __typename } createdAt __typename } __typename } __typename } __typename } }
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;language&quot;: &quot;EN&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Sign out" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="374429323">Sign out</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Helsinki profile API" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${thread-loop}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${thread-count}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${thread-ramp-up}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Sign in to Helsinki profile " enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="249949539">Sign in to Helsinki profile </stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GraphQL" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${helsinki-profile-api}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/graphql/</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${api_token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL queryType" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{},&quot;query&quot;:&quot;query { __schema { queryType { fields { name } } } }&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query { __schema { queryType { fields { name } } } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL mutationType" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{},&quot;query&quot;:&quot;query { __schema { mutationType { fields { name } } } }&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query { __schema { mutationType { fields { name } } } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GraphQL MyProfileQuery" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MyProfileQuery&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query MyProfileQuery {\n  myProfile {\n    id\n    firstName\n    lastName\n    nickname\n    language\n    primaryAddress {\n      id\n      primary\n      address\n      postalCode\n      city\n      countryCode\n      addressType\n      __typename\n    }\n    addresses {\n      edges {\n        node {\n          primary\n          id\n          address\n          postalCode\n          city\n          countryCode\n          addressType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryEmail {\n      id\n      email\n      primary\n      emailType\n      __typename\n    }\n    emails {\n      edges {\n        node {\n          primary\n          id\n          email\n          emailType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    primaryPhone {\n      id\n      phone\n      primary\n      phoneType\n      __typename\n    }\n    phones {\n      edges {\n        node {\n          primary\n          id\n          phone\n          phoneType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    verifiedPersonalInformation {\n      firstName\n      lastName\n      givenName\n      nationalIdentificationNumber\n      municipalityOfResidence\n      municipalityOfResidenceNumber\n      permanentAddress {\n        streetAddress\n        postalCode\n        postOffice\n        __typename\n      }\n      permanentForeignAddress {\n        streetAddress\n        additionalAddress\n        countryCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">MyProfileQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query MyProfileQuery {
  myProfile {
    id
    firstName
    lastName
    nickname
    language
    primaryAddress {
      id
      primary
      address
      postalCode
      city
      countryCode
      addressType
      __typename
    }
    addresses {
      edges {
        node {
          primary
          id
          address
          postalCode
          city
          countryCode
          addressType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryEmail {
      id
      email
      primary
      emailType
      __typename
    }
    emails {
      edges {
        node {
          primary
          id
          email
          emailType
          __typename
        }
        __typename
      }
      __typename
    }
    primaryPhone {
      id
      phone
      primary
      phoneType
      __typename
    }
    phones {
      edges {
        node {
          primary
          id
          phone
          phoneType
          __typename
        }
        __typename
      }
      __typename
    }
    verifiedPersonalInformation {
      firstName
      lastName
      givenName
      nationalIdentificationNumber
      municipalityOfResidence
      municipalityOfResidenceNumber
      permanentAddress {
        streetAddress
        postalCode
        postOffice
        __typename
      }
      permanentForeignAddress {
        streetAddress
        additionalAddress
        countryCode
        __typename
      }
      __typename
    }
    __typename
  }
}
</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Sign out" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="374429323">Sign out</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Sign in to Helsinki profile " enabled="true">
        <stringProp name="TestPlan.comments">Sign in by using Suomi.fi e-Identification</stringProp>
      </TestFragmentController>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Suomi.fi identification - Step 2" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="state" elementType="Argument">
                <stringProp name="Argument.name">state</stringProp>
                <stringProp name="Argument.value">${__RandomString(32,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="suomi-fi-test" elementType="Argument">
                <stringProp name="Argument.name">suomi-fi-test</stringProp>
                <stringProp name="Argument.value">testi.apro.tunnistus.fi</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="suomi-fi-test-saml" elementType="Argument">
                <stringProp name="Argument.name">suomi-fi-test-saml</stringProp>
                <stringProp name="Argument.value">saml-test-idp.apro.tunnistus.fi</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="entityId" elementType="Argument">
                <stringProp name="Argument.name">entityId</stringProp>
                <stringProp name="Argument.value">urn:oid:1.2.246.517.3002.110.999</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">test identifier in the Suomi.fi identification test environment</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">${__RandomString(32)} / suomi-fi-test-saml = saml-test-idp.apro.tunnistus.fi</stringProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
            <stringProp name="delimiter">\t</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">testidentifier.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">personal-identity-code,description,full-name</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create code_verifier" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.security.SecureRandom;

SecureRandom sr = new SecureRandom();
byte[] code = new byte[32];
sr.nextBytes(code);
String verifier = Base64.getUrlEncoder().withoutPadding().encodeToString(code);

// log.info(&apos;code_verifier: &apos; + verifier);
vars.put(&apos;code_verifier&apos;, verifier);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create code_challenge" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.security.MessageDigest
import org.apache.commons.codec.binary.Base64

byte[] bytes = vars.get(&apos;code_verifier&apos;).getBytes(&quot;US-ASCII&quot;);
MessageDigest md = MessageDigest.getInstance(&quot;SHA-256&quot;);
md.update(bytes, 0, bytes.length);
byte[] digest = md.digest();
String challenge = Base64.encodeBase64URLSafeString(digest);

// log.info(&apos;code_challenge: &apos; + challenge);
vars.put(&apos;code_challenge&apos;, challenge);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get OpenID Connect configuration" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tunnistamo}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sso-test/.well-known/openid-configuration</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract authorization_endpoint" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">authorization_endpoint</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.authorization_endpoint</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">https://tunnistamo.dev.hel.ninja/openid/authorize</stringProp>
              <stringProp name="TestPlan.comments">{&quot;issuer&quot;: &quot;https://tunnistamo.dev.hel.ninja/openid&quot;, &quot;authorization_endpoint&quot;: &quot;https://tunnistamo.dev.hel.ninja/openid/authorize&quot;, &quot;token_endpoint&quot;: &quot;https://tunnistamo.dev.hel.ninja/openid/token&quot;, &quot;userinfo_endpoint&quot;: &quot;https://tunnistamo.dev.hel.ninja/openid/userinfo&quot;, &quot;end_session_endpoint&quot;: &quot;https://tunnistamo.dev.hel.ninja/openid/end-session&quot;, &quot;introspection_endpoint&quot;: &quot;https://tunnistamo.dev.hel.ninja/openid/introspect&quot;, &quot;response_types_supported&quot;: [&quot;code&quot;, &quot;id_token&quot;, &quot;id_token token&quot;, &quot;code token&quot;, &quot;code id_token&quot;, &quot;code id_token token&quot;], &quot;jwks_uri&quot;: &quot;https://tunnistamo.dev.hel.ninja/openid/jwks&quot;, &quot;id_token_signing_alg_values_supported&quot;: [&quot;HS256&quot;, &quot;RS256&quot;], &quot;subject_types_supported&quot;: [&quot;public&quot;], &quot;token_endpoint_auth_methods_supported&quot;: [&quot;client_secret_post&quot;, &quot;client_secret_basic&quot;], &quot;backchannel_logout_supported&quot;: true, &quot;backchannel_logout_session_supported&quot;: true}</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Open Tunnistamo // HARDCODE" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">https://api.hel.fi/auth/helsinkiprofile-ui-stage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                  <stringProp name="Argument.value">https://profiili.stage.hel.ninja/callback</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                  <stringProp name="Argument.value">code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">openid profile email https://api.hel.fi/auth/helsinkiprofile</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">${state}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="code_challenge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">code_challenge</stringProp>
                  <stringProp name="Argument.value">${code_challenge}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="code_challenge_method" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">code_challenge_method</stringProp>
                  <stringProp name="Argument.value">S256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ui_locales" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ui_locales</stringProp>
                  <stringProp name="Argument.value">en-US</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_mode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response_mode</stringProp>
                  <stringProp name="Argument.value">query</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tunnistamo}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/sso-test/openid/authorize</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract next" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">next</stringProp>
              <stringProp name="RegexExtractor.regex">(&quot;\/sso-test\/accounts\/login\/heltunnistussuomifi\/\?next=)(.*)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Open Suomi.fi e-Identification" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="next" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${next}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">next</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tunnistamo}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sso-test/accounts/login/heltunnistussuomifi/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <XPath2Extractor guiclass="XPath2ExtractorGui" testclass="XPath2Extractor" testname="Extract SAMLRequest" enabled="true">
              <stringProp name="XPathExtractor2.default"></stringProp>
              <stringProp name="XPathExtractor2.refname">SAMLRequest</stringProp>
              <stringProp name="XPathExtractor2.matchNumber">1</stringProp>
              <stringProp name="XPathExtractor2.xpathQuery">//xhtml:input[@name=&apos;SAMLRequest&apos;]/@value</stringProp>
              <stringProp name="XPathExtractor2.namespaces">xhtml=http://www.w3.org/1999/xhtml</stringProp>
            </XPath2Extractor>
            <hashTree/>
            <XPath2Extractor guiclass="XPath2ExtractorGui" testclass="XPath2Extractor" testname="Extract RelayState" enabled="true">
              <stringProp name="XPathExtractor2.default"></stringProp>
              <stringProp name="XPathExtractor2.refname">RelayState</stringProp>
              <stringProp name="XPathExtractor2.matchNumber">1</stringProp>
              <stringProp name="XPathExtractor2.xpathQuery">//xhtml:input[@name=&apos;RelayState&apos;]/@value</stringProp>
              <stringProp name="XPathExtractor2.namespaces">xhtml=http://www.w3.org/1999/xhtml</stringProp>
            </XPath2Extractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select identification method (Test IdP)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="SAMLRequest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${SAMLRequest}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">SAMLRequest</stringProp>
                </elementProp>
                <elementProp name="RelayState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RelayState}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">RelayState</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${suomi-fi-test}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/idp/profile/SAML2/POST/SSO</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract conversation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">conversation</stringProp>
              <stringProp name="RegexExtractor.regex">[?&amp;]conversation=([^&amp;]+).*$</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract tid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">tid</stringProp>
              <stringProp name="RegexExtractor.regex">[?&amp;]tid=([^&amp;]+).*$</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract pid" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">pid</stringProp>
              <stringProp name="RegexExtractor.regex">[?&amp;]pid=([^&amp;]+).*$</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract tag" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">tag</stringProp>
              <stringProp name="RegexExtractor.regex">[?&amp;]tag=([^&amp;]+).*$</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select identification method (Redirect)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="conversation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${conversation}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">conversation</stringProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${tid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${pid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                </elementProp>
                <elementProp name="tag" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${tag}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tag</stringProp>
                </elementProp>
                <elementProp name="entityId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${entityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entityId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${suomi-fi-test}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/idp/authn/External</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Authentication redirect requires JavaScript</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identify (Personal identiity code) // HARDCODE" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="conversation" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${conversation}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">conversation</stringProp>
                </elementProp>
                <elementProp name="referrer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">referrer</stringProp>
                </elementProp>
                <elementProp name="hetu" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">150552-9979</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hetu</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${suomi-fi-test-saml}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/testidp/authn/External</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Identify yourself to Helsinki tunnistus</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <XPath2Extractor guiclass="XPath2ExtractorGui" testclass="XPath2Extractor" testname="Extract SAMLResponse" enabled="true">
              <stringProp name="XPathExtractor2.default"></stringProp>
              <stringProp name="XPathExtractor2.refname">SAMLResponse</stringProp>
              <stringProp name="XPathExtractor2.matchNumber">1</stringProp>
              <stringProp name="XPathExtractor2.xpathQuery">//input[@name=&apos;SAMLResponse&apos;]/@value</stringProp>
              <stringProp name="XPathExtractor2.namespaces"></stringProp>
            </XPath2Extractor>
            <hashTree/>
            <XPath2Extractor guiclass="XPath2ExtractorGui" testclass="XPath2Extractor" testname="Extract RelayState" enabled="true">
              <stringProp name="XPathExtractor2.default"></stringProp>
              <stringProp name="XPathExtractor2.refname">RelayState</stringProp>
              <stringProp name="XPathExtractor2.matchNumber">1</stringProp>
              <stringProp name="XPathExtractor2.xpathQuery">//input[@name=&apos;RelayState&apos;]/@value</stringProp>
              <stringProp name="XPathExtractor2.namespaces"></stringProp>
            </XPath2Extractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identify (Continue)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="SAMLResponse" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SAMLResponse</stringProp>
                  <stringProp name="Argument.value">${SAMLResponse}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="RelayState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">RelayState</stringProp>
                  <stringProp name="Argument.value">${RelayState}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${suomi-fi-test}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/Shibboleth.sso/SAML2/POST</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Continue requires JavaScript</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract action" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">action</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;form id=\&quot;attribute-form\&quot; action=\&quot;(.*)\&quot; method=\&quot;post\&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identify to Helsinki tunnistus" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">nationalIdentificationNumber</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">cn</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">sn</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">firstName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">municipality</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">domesticAddress</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">postalCode</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">city</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">municipalityCode</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">displayName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">givenName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">vtjVerified</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentIds</stringProp>
                  <stringProp name="Argument.value">finnishCitizenship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_shib_idp_consentOptions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_shib_idp_consentOptions</stringProp>
                  <stringProp name="Argument.value">_shib_idp_doNotRememberConsent</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId_proceed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_eventId_proceed</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${suomi-fi-test}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${action}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Continue identifying yourself to the service</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <XPath2Extractor guiclass="XPath2ExtractorGui" testclass="XPath2Extractor" testname="Extract SAMLResponse" enabled="true">
              <stringProp name="XPathExtractor2.default"></stringProp>
              <stringProp name="XPathExtractor2.refname">SAMLResponse</stringProp>
              <stringProp name="XPathExtractor2.matchNumber">1</stringProp>
              <stringProp name="XPathExtractor2.xpathQuery">//input[@name=&apos;SAMLResponse&apos;]/@value</stringProp>
              <stringProp name="XPathExtractor2.namespaces"></stringProp>
            </XPath2Extractor>
            <hashTree/>
            <XPath2Extractor guiclass="XPath2ExtractorGui" testclass="XPath2Extractor" testname="Extract RelayState" enabled="true">
              <stringProp name="XPathExtractor2.default"></stringProp>
              <stringProp name="XPathExtractor2.refname">RelayState</stringProp>
              <stringProp name="XPathExtractor2.matchNumber">1</stringProp>
              <stringProp name="XPathExtractor2.xpathQuery">//input[@name=&apos;RelayState&apos;]/@value</stringProp>
              <stringProp name="XPathExtractor2.namespaces"></stringProp>
            </XPath2Extractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Identify to Helsinki tunnistus (Continue)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="SAMLResponse" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${SAMLResponse}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">SAMLResponse</stringProp>
                </elementProp>
                <elementProp name="RelayState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RelayState}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">RelayState</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tunnistus}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/auth/realms/helsinki-tunnistus/broker/suomi_fi/endpoint</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Continue requires JavaScript</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">code</stringProp>
              <stringProp name="RegexExtractor.regex">[?&amp;]code=([^&amp;]+).*$</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract action" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">action</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;form class=\&quot;form-actions\&quot; id=\&quot;kc-update-profile-confirm-form\&quot; action=\&quot;https://tunnistus.stage.hel.ninja(.*)\&quot; method=\&quot;post\&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Continue to Helsinki profile " enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="response" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response</stringProp>
                  <stringProp name="Argument.value">accept</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tunnistus}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${action}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">/openid/authorize fails due to  a missing, invalid, or mismatching redirection URI (redirect_uri)</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract code" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">code</stringProp>
              <stringProp name="RegexExtractor.regex">[?&amp;]code=([^&amp;]+).*$</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get token // HARDCODE" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">https://api.hel.fi/auth/helsinkiprofile-ui-stage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${code}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">code</stringProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">https://profiili.stage.hel.ninja/callback</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                </elementProp>
                <elementProp name="code_verifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${code_verifier}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">code_verifier</stringProp>
                </elementProp>
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">authorization_code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tunnistamo}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sso-test/openid/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract access_token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get userinfo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tunnistamo}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sso-test/openid/userinfo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get api-tokens" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tunnistamo}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sso-test/api-tokens/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract api_token" enabled="true">
              <stringProp name="TestPlan.comments">{&quot;https://api.hel.fi/auth/helsinkiprofiledev&quot;: &quot;&lt;api_token&gt;&quot;}</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">api_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">*</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">api_token</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Sign out" enabled="true"/>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Sign out - Step 6" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="suomi-fi-test" elementType="Argument">
                <stringProp name="Argument.name">suomi-fi-test</stringProp>
                <stringProp name="Argument.value">testi.apro.tunnistus.fi</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sign out" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id_token_hint" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${api_token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id_token_hint</stringProp>
                </elementProp>
                <elementProp name="post_logout_redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">https://profiili.dev.hel.ninja/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">post_logout_redirect_uri</stringProp>
                </elementProp>
                <elementProp name="ui_locales" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ui_locales}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ui_locales</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tunnistamo}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/openid/end-session</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract action" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">action</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;form name=\&quot;saml-post-binding\&quot; method=\&quot;post\&quot; action=\&quot;https://testi.apro.tunnistus.fi(.*)\&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments"> &lt;form name=&quot;saml-post-binding&quot; method=&quot;post&quot; action=&quot;https://testi.apro.tunnistus.fi/idp/profile/SAML2/POST/SLO&quot;&gt;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract SAMLRequest" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SAMLRequest</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=\&quot;hidden\&quot; name=\&quot;SAMLRequest\&quot; value=\&quot;(.*)\&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;SAMLRequest&quot; value=&quot;...&quot;/&gt;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract RelayState" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">RelayState</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=\&quot;hidden\&quot; name=\&quot;RelayState\&quot; value=\&quot;(.*)\&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;RelayState&quot; value=&quot;...&quot;/&gt;</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sign out (Continue)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="SAMLRequest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${SAMLRequest}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">SAMLRequest</stringProp>
                </elementProp>
                <elementProp name="RelayState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${RelayState}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">RelayState</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${suomi-fi-test}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${action}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract url" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">url</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;meta http-equiv=\&quot;refresh\&quot; content=\&quot;0;url=(.*)\&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=/idp/profile/SAML2/POST/SLO?execution=e9s1&amp;_eventId=proceed&quot;&gt;</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sign out (Continue)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${suomi-fi-test}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${url}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract action" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">action</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;form action=\&quot;(.*)\&quot; method=\&quot;post\&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">&lt;form action=&quot;https&amp;#x3a;&amp;#x2f;&amp;#x2f;tunnistus.dev.hel.ninja&amp;#x2f;auth&amp;#x2f;realms&amp;#x2f;helsinki-tunnistus&amp;#x2f;broker&amp;#x2f;suomi_fi&amp;#x2f;endpoint&quot; method=&quot;post&quot;&gt;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters">${action}</stringProp>
              <stringProp name="script">import org.apache.commons.text.StringEscapeUtils
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String action = StringEscapeUtils.unescapeHtml4(args[0]);
log.info(&apos;action: &apos; + action);

Pattern pattern = Pattern.compile(&quot;^(https://)([^/?#]*)?(.*)&quot;);
Matcher matcher = pattern.matcher(action);
log.info(&apos;match: &apos; + matcher.find());

vars.put(&apos;server&apos;, matcher.group(2));
vars.put(&apos;path&apos;, matcher.group(3));
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract SAMLResponse" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SAMLResponse</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=\&quot;hidden\&quot; name=\&quot;SAMLResponse\&quot; value=\&quot;(.*)\&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;SAMLResponse&quot; value=&quot;...&quot;/&gt;</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract RelayState" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">RelayState</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;input type=\&quot;hidden\&quot; name=\&quot;RelayState\&quot; value=\&quot;(.*)\&quot;/&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">&lt;input type=&quot;hidden&quot; name=&quot;RelayState&quot; value=&quot;...&quot;/&gt;</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sign out (Continue)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="SAMLResponse" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${SAMLResponse}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">SAMLResponse</stringProp>
                </elementProp>
                <elementProp name="RelayState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${RelayState}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">RelayState</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">C:/hel-profiili-repos2022/helsinki-profile-ui-aok/jmeter/testusers.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">TESTIHETU</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Testuser1" enabled="false"/>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThroughputVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transaction Throughput vs Threads" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
